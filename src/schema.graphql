type Query {
    users(query: String): [User!]!
    posts: [Post!]!
    comments: [Comment!]!
}
type Mutation {
    createUser(data: createUserInput!): User!
    createPost(title: String!, body: String!, author: ID!): Post!
    createComment(body: String!, author: ID!, post: ID!): Comment!
}
input createUserInput{
    name: String!
    email: String!
    phone: String!
}

type Subscription {
    count: Int!
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type User {
    id: ID!
    name: String!
    email: String!
    phone: String!
    posts(limit: Int): [Post!]!
    comments: [Comment!]!
}
type Post {
    id: ID!
    title: String!
    body: String!
    author: User!
    comments(limit: Int): [Comment]
}
type Comment {
    id: ID!
    body: String!
    author: User!
    post: Post!
}
type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}
type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}
enum MutationType {
    CREATED
    UPDATED
    DELETED
}